// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package types

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ErrorCode int64

const (
	ErrorCode_CLIENT_ERROR          ErrorCode = 0
	ErrorCode_NOT_FOUND             ErrorCode = 1
	ErrorCode_SERVER_ERROR          ErrorCode = 2
	ErrorCode_NOT_IMPLEMENTED_ERROR ErrorCode = 3
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_CLIENT_ERROR:
		return "ErrorCode_CLIENT_ERROR"
	case ErrorCode_NOT_FOUND:
		return "ErrorCode_NOT_FOUND"
	case ErrorCode_SERVER_ERROR:
		return "ErrorCode_SERVER_ERROR"
	case ErrorCode_NOT_IMPLEMENTED_ERROR:
		return "ErrorCode_NOT_IMPLEMENTED_ERROR"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "ErrorCode_CLIENT_ERROR":
		return ErrorCode_CLIENT_ERROR, nil
	case "ErrorCode_NOT_FOUND":
		return ErrorCode_NOT_FOUND, nil
	case "ErrorCode_SERVER_ERROR":
		return ErrorCode_SERVER_ERROR, nil
	case "ErrorCode_NOT_IMPLEMENTED_ERROR":
		return ErrorCode_NOT_IMPLEMENTED_ERROR, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

// Attributes:
//  - Code
//  - Message
type ServiceException struct {
	Code    ErrorCode `thrift:"code,1,required" json:"code"`
	Message string    `thrift:"message,2,required" json:"message"`
}

func NewServiceException() *ServiceException {
	return &ServiceException{}
}

func (p *ServiceException) GetCode() ErrorCode {
	return p.Code
}

func (p *ServiceException) GetMessage() string {
	return p.Message
}
func (p *ServiceException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCode bool = false
	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetCode = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"))
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *ServiceException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *ServiceException) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *ServiceException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServiceException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *ServiceException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *ServiceException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceException(%+v)", *p)
}

func (p *ServiceException) Error() string {
	return p.String()
}
